#!/usr/bin/env bash
set -e
export UNAME
UNAME="$(uname)"

command -v gdate >/dev/null && date() { gdate "$@"; } && export -f date
command -v gstat >/dev/null && stat() { gstat "$@"; } && export -f stat

function main {
    [[ "$SHELL" =~ /bash$ ]] || sudo chsh -s "$(command -v bash)" "$(whoami)"

    if [[ "$1" == "-u" || "$1" == "--update" ]]; then
        UPDATE_ONLY="true"
        shift
    fi

    CONFIG="install.conf.yaml"
    DOTBOT_DIR="dotbot"
    DOTBOT_BIN="bin/dotbot"
    BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

    cd "${BASEDIR}"
    git fetch -q
    if [[ -z ${RESTART} ]]; then
        git diff --quiet HEAD:install origin/master:install || RESTART=true
    fi
    git pull -q
    [[ "${RESTART}" == "true" ]] && RESTART=false exec ${BASH_SOURCE[0]}

    git -C "${DOTBOT_DIR}" submodule sync --quiet --recursive
    git submodule update --init --recursive "${DOTBOT_DIR}"

    # cleanup some old 'uname' messes
    (( $(date --date='July 04 2022' +%s) < $(date +%s) )) && printf "\n\a\e[1;91mdotfiles/install:%d - Remove This Cleanup Code!\e[0m\n\n" ${LINENO}
    rm -f ~/.gitconfig.* ~/.bashrc.* ~/.install ~/.install.conf.yaml ~/.lessfilter

    # Will access ${UNAME} in install.conf.yaml
    "${BASEDIR}/${DOTBOT_DIR}/${DOTBOT_BIN}" -q -d "${BASEDIR}" -c "${CONFIG}" "${@}"

    if [[ "${UPDATE_ONLY}" != "true" ]]; then
        install pip3 python3-pip
        install pygmentize pygments "pip3 install pygments"
        install dircolors coreutils
        install tmux tmux
        # install aws awscli
    fi
}

function uptodate() {
    local UPDATE_FILE UPDATED_SINCE_DAYS UPDATED_SINCE_SECONDS STAT_UPDATE NOW

    UPDATE_FILE="$1"
    UPDATED_SINCE_DAYS="${2:-28}"
    NOW=$(date +%s)

    [[ -r "${UPDATE_FILE}" ]] || return 1

    UPDATED_SINCE_SECONDS=$(( (60 * 60 * 24 * UPDATED_SINCE_DAYS) ))
    UPDATED_SINCE_SECONDS=$(( NOW - UPDATED_SINCE_SECONDS ))

    STAT_UPDATE=$(stat --format=%Z "${UPDATE_FILE}")

    (( STAT_UPDATE != 0 && STAT_UPDATE > UPDATED_SINCE_SECONDS ))
}

function install() {
    local BINARY PACKAGE INSTALL_CMD
    BINARY="$1"
    PACKAGE="$2"

    case "${UNAME}" in
    (*Darwin*)
        INSTALL_CMD="${3:-brew install -q -f}"
        command -v "brew" >/dev/null || /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        uptodate "${HOMEBREW_REPOSITORY}/Library/Taps/homebrew/homebrew-core/synced_versions_formulae.json" || brew update
        ;;
    (*Linux*)
        INSTALL_CMD="${3:-sudo apt-get install -qq -y}"
        # hack - if apt doesnt' know about pip, it may be a mew container, never updated
        { [[ -n $(apt-cache search --names-only '^python3-pip$') ]] && uptodate /var/cache/apt; } ||
            { echo Running apt-get update; sudo apt-get -qq -y update; }
        ;;
    (*)
        echo "install: unknown platform - $(uname)"
        return
        ;;
    esac;

    command -v "${BINARY}" >/dev/null ||
        { echo "Installing: ${PACKAGE}..."; ${INSTALL_CMD} "${PACKAGE}"; }
}

export DEBIAN_FRONTEND=noninteractive
main "$@"
